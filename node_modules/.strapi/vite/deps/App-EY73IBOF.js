import {
  getTrad,
  useDeleteVersionMutation,
  useGetInfoQuery,
  useRegenerateDocMutation
} from "./chunk-ZX2UMO77.js";
import {
  PERMISSIONS
} from "./chunk-HWUKOP6W.js";
import "./chunk-JBECBRKU.js";
import "./chunk-AK5CFNWL.js";
import "./chunk-7K5LX54E.js";
import "./chunk-76QSIOPR.js";
import "./chunk-C2IPEJI6.js";
import "./chunk-KYI5KZ6U.js";
import "./chunk-YHLTOB3J.js";
import "./chunk-GYXLLRCS.js";
import "./chunk-IFJLVSR4.js";
import "./chunk-WSIPKQ76.js";
import "./chunk-VA5FSNBU.js";
import "./chunk-KNDX7Q44.js";
import "./chunk-6LPKNYI2.js";
import "./chunk-TJHQSKLE.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-6X67JDK6.js";
import "./chunk-Q7VKFRC2.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-SX5QJQOF.js";
import "./chunk-OU7VV2YS.js";
import "./chunk-BLDVSLW5.js";
import "./chunk-ENHRN2J6.js";
import "./chunk-SS7MAJ3E.js";
import "./chunk-TXMGGV7G.js";
import "./chunk-ZTLC7K6V.js";
import "./chunk-NATWZEGX.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-75FHHHG5.js";
import "./chunk-GGB7PTMN.js";
import "./chunk-XGAFFV4H.js";
import "./chunk-CMQ5TXVE.js";
import "./chunk-C7H2BX76.js";
import "./chunk-75XTHHTN.js";
import "./chunk-DUTI3HS6.js";
import "./chunk-E74HLFFS.js";
import "./chunk-IB7JVL66.js";
import "./chunk-UO5HWOBQ.js";
import "./chunk-NVY3U5JE.js";
import "./chunk-HVZFOG6L.js";
import "./chunk-FFM4DZM4.js";
import "./chunk-QIJGNK42.js";
import "./chunk-RWMW57S6.js";
import "./chunk-FPZG6URS.js";
import "./chunk-MW2GEAAJ.js";
import "./chunk-YUXYGWVY.js";
import "./chunk-IUVVMD3A.js";
import "./chunk-MSZDVF75.js";
import "./chunk-K5J3Z6C2.js";
import "./chunk-7SXGFFDI.js";
import "./chunk-BGWRF3GD.js";
import "./chunk-X5AHMEEK.js";
import "./chunk-TQWVKMZZ.js";
import "./chunk-33KTGYUK.js";
import "./chunk-BF533OQB.js";
import "./chunk-5AA2RXW5.js";
import {
  ConfirmDialog
} from "./chunk-H24P4INZ.js";
import {
  useRBAC
} from "./chunk-5KB3DR3E.js";
import "./chunk-ZXICFMTL.js";
import "./chunk-A2AYF3MX.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-RHGSFS4X.js";
import "./chunk-5GWXYVYR.js";
import "./chunk-T2ARN7TZ.js";
import "./chunk-KW3KTYN5.js";
import "./chunk-7TJDAO42.js";
import "./chunk-TR7AWP6K.js";
import "./chunk-5Q63QJTB.js";
import "./chunk-XCJYJIRY.js";
import "./chunk-EWPGSFNC.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-YTA6ZQ7G.js";
import "./chunk-U2S4VNVE.js";
import "./chunk-AI4RWEGD.js";
import {
  Layouts
} from "./chunk-SHTK4JUI.js";
import "./chunk-SOP7DAXI.js";
import "./chunk-5FJJVU7Y.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-PQINNV4N.js";
import "./chunk-FPU5PDM4.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-YSE76GSK.js";
import "./chunk-LF33BP4W.js";
import "./chunk-3NZV5W4K.js";
import {
  useNotification
} from "./chunk-OXZXRS6S.js";
import "./chunk-W57J2NBK.js";
import "./chunk-HOPYY6KC.js";
import "./chunk-V3H6CYGR.js";
import "./chunk-KTKIRFL6.js";
import "./chunk-HM5YIFDI.js";
import "./chunk-QOUV5O5E.js";
import {
  useIntl
} from "./chunk-PTQWOGDC.js";
import "./chunk-7K6WC7UG.js";
import "./chunk-RKN75MQZ.js";
import {
  Dialog,
  EmptyStateLayout,
  Flex,
  IconButton,
  LinkButton,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
  Typography
} from "./chunk-RDVKXTMX.js";
import {
  ForwardRef$3D,
  ForwardRef$5n,
  ForwardRef$j
} from "./chunk-GENNXA43.js";
import "./chunk-AWHRF5BE.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-OSJEGB6V.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/plugin-documentation/dist/admin/pages/App.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var App = () => {
  var _a;
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { data, isLoading: isLoadingInfo, isError } = useGetInfoQuery();
  const [regenerate] = useRegenerateDocMutation();
  const [deleteVersion] = useDeleteVersionMutation();
  const [showConfirmDelete, setShowConfirmDelete] = React.useState(false);
  const [versionToDelete, setVersionToDelete] = React.useState();
  const { allowedActions, isLoading: isLoadingRBAC } = useRBAC(PERMISSIONS);
  const isLoading = isLoadingInfo || isLoadingRBAC;
  const colCount = 4;
  const rowCount = (((_a = data == null ? void 0 : data.docVersions) == null ? void 0 : _a.length) || 0) + 1;
  const handleRegenerateDoc = (version) => {
    regenerate({
      version
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.generate.success"),
          defaultMessage: "Successfully generated documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
  };
  const handleConfirmDelete = async () => {
    if (!versionToDelete) {
      return;
    }
    await deleteVersion({
      version: versionToDelete
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.delete.success"),
          defaultMessage: "Successfully deleted documentation"
        })
      });
    }).catch((err) => {
      toggleNotification({
        type: "warning",
        message: formatAPIError(err)
      });
    });
    setShowConfirmDelete(!showConfirmDelete);
  };
  const handleClickDelete = (version) => {
    setVersionToDelete(version);
    setShowConfirmDelete(!showConfirmDelete);
  };
  const title = formatMessage({
    id: getTrad("plugin.name"),
    defaultMessage: "Documentation"
  });
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: title
      }),
      (0, import_jsx_runtime.jsxs)(Page.Main, {
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title,
            subtitle: formatMessage({
              id: getTrad("pages.PluginPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(OpenDocLink, {
              disabled: !allowedActions.canRead || !(data == null ? void 0 : data.currentVersion) || !(data == null ? void 0 : data.prefix),
              href: createDocumentationHref(`${data == null ? void 0 : data.prefix}/v${data == null ? void 0 : data.currentVersion}`),
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$3D, {}),
              children: formatMessage({
                id: getTrad("pages.PluginPage.Button.open"),
                defaultMessage: "Open Documentation"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (data == null ? void 0 : data.docVersions.length) ? (0, import_jsx_runtime.jsxs)(Table, {
              colCount,
              rowCount,
              children: [
                (0, import_jsx_runtime.jsx)(Thead, {
                  children: (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.version"),
                            defaultMessage: "Version"
                          })
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Th, {
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          variant: "sigma",
                          textColor: "neutral600",
                          children: formatMessage({
                            id: getTrad("pages.PluginPage.table.generated"),
                            defaultMessage: "Last Generated"
                          })
                        })
                      })
                    ]
                  })
                }),
                (0, import_jsx_runtime.jsx)(Tbody, {
                  children: data.docVersions.slice(0).sort((a, b) => a.generatedDate < b.generatedDate ? 1 : -1).map((doc) => (0, import_jsx_runtime.jsxs)(Tr, {
                    children: [
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.version
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        width: "50%",
                        children: (0, import_jsx_runtime.jsx)(Typography, {
                          children: doc.generatedDate
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Td, {
                        children: (0, import_jsx_runtime.jsxs)(Flex, {
                          justifyContent: "end",
                          onClick: (e) => e.stopPropagation(),
                          children: [
                            (0, import_jsx_runtime.jsx)(IconButton, {
                              tag: "a",
                              disabled: !allowedActions.canRead,
                              href: createDocumentationHref(`${data.prefix}/v${doc.version}`),
                              variant: "ghost",
                              target: "_blank",
                              rel: "noopener noreferrer",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.show"),
                                defaultMessage: "Open {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$3D, {})
                            }),
                            allowedActions.canRegenerate ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleRegenerateDoc(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: getTrad("pages.PluginPage.table.icon.regenerate"),
                                defaultMessage: "Regenerate {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$5n, {})
                            }) : null,
                            allowedActions.canUpdate && doc.version !== data.currentVersion ? (0, import_jsx_runtime.jsx)(IconButton, {
                              onClick: () => handleClickDelete(doc.version),
                              variant: "ghost",
                              label: formatMessage({
                                id: "global.delete-target",
                                defaultMessage: "Delete {target}"
                              }, {
                                target: `${doc.version}`
                              }),
                              children: (0, import_jsx_runtime.jsx)(ForwardRef$j, {})
                            }) : null
                          ]
                        })
                      })
                    ]
                  }, doc.version))
                })
              ]
            }) : (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
              content: "",
              icon: null
            })
          }),
          (0, import_jsx_runtime.jsx)(Dialog.Root, {
            open: showConfirmDelete,
            onOpenChange: setShowConfirmDelete,
            children: (0, import_jsx_runtime.jsx)(ConfirmDialog, {
              onConfirm: handleConfirmDelete
            })
          })
        ]
      })
    ]
  });
};
var OpenDocLink = dt(LinkButton)`
  text-decoration: none;
`;
var createDocumentationHref = (path) => {
  if (path.startsWith("http")) {
    return path;
  }
  if (path.startsWith("/")) {
    return `${window.strapi.backendURL}${path}`;
  }
  return `${window.strapi.backendURL}/${path}`;
};
export {
  App
};
//# sourceMappingURL=App-EY73IBOF.js.map
