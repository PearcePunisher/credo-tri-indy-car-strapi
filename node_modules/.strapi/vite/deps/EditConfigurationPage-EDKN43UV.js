import {
  ConfigurationForm,
  TEMP_FIELD_NAME
} from "./chunk-QVAKEH25.js";
import "./chunk-WSHVABDE.js";
import {
  useTypedSelector
} from "./chunk-QFYUMCFD.js";
import "./chunk-GQHNO72B.js";
import {
  setIn,
  useDoc,
  useDocLayout,
  useGetInitialDataQuery,
  useUpdateContentTypeConfigurationMutation
} from "./chunk-A6YMQS7I.js";
import "./chunk-Z3WTPB6S.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-WBF3ZPZ2.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-M3FBV2RO.js";
import "./chunk-7C7SN2C2.js";
import "./chunk-3NTHE2Z4.js";
import "./chunk-GIVYC7EJ.js";
import "./chunk-4J3VOWQV.js";
import "./chunk-I7NBSXO7.js";
import "./chunk-Z5K3EEXO.js";
import "./chunk-HESTQQUH.js";
import "./chunk-27FTEA6J.js";
import "./chunk-ECRCO47I.js";
import "./chunk-G2SYI2BQ.js";
import "./chunk-MLQL2PXS.js";
import "./chunk-OTTR2OYC.js";
import "./chunk-A5QE3EPI.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-HRRHIPCT.js";
import "./chunk-K65KIEAL.js";
import "./chunk-WVYSQCVC.js";
import "./chunk-B2UX67HW.js";
import "./chunk-R6W55IJH.js";
import "./chunk-BY7TE64D.js";
import "./chunk-VTAUGDSE.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-CKUF3T4P.js";
import "./chunk-EGNP2T5O.js";
import {
  useTracking
} from "./chunk-YAWBSSSK.js";
import "./chunk-ESNXZ5TC.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-QIJGNK42.js";
import "./chunk-KYGPBKH3.js";
import "./chunk-3POBGR7P.js";
import "./chunk-ZZX3KZYK.js";
import "./chunk-TZEWZT64.js";
import "./chunk-NFFCOAW7.js";
import "./chunk-3AGM522T.js";
import "./chunk-KMCEBOP3.js";
import "./chunk-HPXPYDUL.js";
import "./chunk-RW7JA5XD.js";
import "./chunk-NZWKA5LG.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-QODLH46I.js";
import "./chunk-MK42OM5W.js";
import "./chunk-DRNZY5EA.js";
import "./chunk-YDFPJOT4.js";
import "./chunk-I62MATQO.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-5VODLFKF.js";
import {
  useNotification
} from "./chunk-S4MCIN37.js";
import {
  useIntl
} from "./chunk-JIOESDX2.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-TUXTO2Z5.js";
import "./chunk-Z6RD4GFL.js";
import "./chunk-FOD4ENRR.js";
import "./chunk-ZBEKWUZ2.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-4EQMEDYW.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/pages/EditConfigurationPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var EditConfigurationPage = () => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { isLoading: isLoadingSchema, schema, model } = useDoc();
  const { isLoading: isLoadingLayout, error, list, edit } = useDocLayout();
  const { fieldSizes, error: errorFieldSizes, isLoading: isLoadingFieldSizes, isFetching: isFetchingFieldSizes } = useGetInitialDataQuery(void 0, {
    selectFromResult: (res) => {
      var _a;
      const fieldSizes2 = Object.entries(((_a = res.data) == null ? void 0 : _a.fieldSizes) ?? {}).reduce((acc, [attributeName, { default: size }]) => {
        acc[attributeName] = size;
        return acc;
      }, {});
      return {
        isFetching: res.isFetching,
        isLoading: res.isLoading,
        error: res.error,
        fieldSizes: fieldSizes2
      };
    }
  });
  React.useEffect(() => {
    if (errorFieldSizes) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(errorFieldSizes)
      });
    }
  }, [
    errorFieldSizes,
    formatAPIError,
    toggleNotification
  ]);
  const isLoading = isLoadingSchema || isLoadingLayout || isLoadingFieldSizes || isFetchingFieldSizes;
  const [updateConfiguration] = useUpdateContentTypeConfigurationMutation();
  const handleSubmit = async (data) => {
    try {
      trackUsage("willSaveContentTypeLayout");
      const meta = Object.entries(list.metadatas).reduce((acc, [name, { mainField: _mainField, ...listMeta }]) => {
        const existingEditMeta = edit.metadatas[name];
        const { __temp_key__, size: _size, name: _name, ...editedMetadata } = data.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};
        acc[name] = {
          edit: {
            ...existingEditMeta,
            ...editedMetadata
          },
          list: listMeta
        };
        return acc;
      }, {});
      const res = await updateConfiguration({
        layouts: {
          edit: data.layout.map((row) => row.children.reduce((acc, { name, size }) => {
            if (name !== TEMP_FIELD_NAME) {
              return [
                ...acc,
                {
                  name,
                  size
                }
              ];
            }
            return acc;
          }, [])),
          list: list.layout.map((field) => field.name)
        },
        settings: setIn(data.settings, "displayName", void 0),
        metadatas: meta,
        uid: model
      });
      if ("data" in res) {
        trackUsage("didEditEditSettings");
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "notification.success.saved",
            defaultMessage: "Saved"
          })
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (errorFieldSizes || error || !schema) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: `Configure ${edit.settings.displayName} Edit View`
      }),
      (0, import_jsx_runtime.jsx)(ConfigurationForm, {
        onSubmit: handleSubmit,
        attributes: schema.attributes,
        fieldSizes,
        layout: edit
      })
    ]
  });
};
var ProtectedEditConfigurationPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.contentManager) == null ? void 0 : _a.collectionTypesConfigurations;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(EditConfigurationPage, {})
  });
};
export {
  EditConfigurationPage,
  ProtectedEditConfigurationPage
};
//# sourceMappingURL=EditConfigurationPage-EDKN43UV.js.map
