import {
  getTrad,
  pluginId
} from "./chunk-RJWRBNOC.js";
import {
  Flex
} from "./chunk-46IFOU3F.js";
import {
  ForwardRef$1H
} from "./chunk-Q5ULD7QJ.js";
import "./chunk-AWHRF5BE.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-3LBZKDTB.js";
import "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/plugin-color-picker/dist/admin/components/ColorPickerIcon.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var IconBox = dt(Flex)`
  /* Hard code color values */
  /* to stay consistent between themes */
  background-color: #f0f0ff; /* primary100 */
  border: 1px solid #d9d8ff; /* primary200 */

  svg > path {
    fill: #4945ff; /* primary600 */
  }
`;
var ColorPickerIcon = () => {
  return (0, import_jsx_runtime.jsx)(IconBox, {
    justifyContent: "center",
    alignItems: "center",
    width: 7,
    height: 6,
    hasRadius: true,
    "aria-hidden": true,
    children: (0, import_jsx_runtime.jsx)(ForwardRef$1H, {})
  });
};

// node_modules/@strapi/plugin-color-picker/dist/admin/utils/prefixPluginTranslations.mjs
var prefixPluginTranslations = (trad, pluginId2) => {
  return Object.keys(trad).reduce((acc, current) => {
    acc[`${pluginId2}.${current}`] = trad[current];
    return acc;
  }, {});
};

// node_modules/@strapi/plugin-color-picker/dist/admin/index.mjs
function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case "./translations/cs.json":
      return import("./cs.json-VHC54KLQ.js");
    case "./translations/en.json":
      return import("./en.json-TU5JLF22.js");
    case "./translations/ru.json":
      return import("./ru.json-7OJXUVQB.js");
    case "./translations/sv.json":
      return import("./sv.json-IK42MUCV.js");
    case "./translations/tr.json":
      return import("./tr.json-GO6IQ4V3.js");
    case "./translations/uk.json":
      return import("./uk.json-42GC46HA.js");
    case "./translations/zh.json":
      return import("./zh.json-HVMQI3WX.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var index = {
  /**
  * TODO: we need to have the type for StrapiApp done from `@strapi/admin` package.
  */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  register(app) {
    app.customFields.register({
      name: "color",
      pluginId: "color-picker",
      type: "string",
      icon: ColorPickerIcon,
      intlLabel: {
        id: getTrad("color-picker.label"),
        defaultMessage: "Color"
      },
      intlDescription: {
        id: getTrad("color-picker.description"),
        defaultMessage: "Select any color"
      },
      components: {
        Input: async () => import("./ColorPickerInput-X4YO4RQM.js").then((module) => ({
          default: module.ColorPickerInput
        }))
      },
      options: {
        advanced: [
          {
            intlLabel: {
              id: getTrad("color-picker.options.advanced.regex"),
              defaultMessage: "RegExp pattern"
            },
            name: "regex",
            type: "text",
            defaultValue: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            description: {
              id: getTrad("color-picker.options.advanced.regex.description"),
              defaultMessage: "The text of the regular expression"
            }
          },
          {
            sectionTitle: {
              id: "global.settings",
              defaultMessage: "Settings"
            },
            items: [
              {
                name: "required",
                type: "checkbox",
                intlLabel: {
                  id: getTrad("color-picker.options.advanced.requiredField"),
                  defaultMessage: "Required field"
                },
                description: {
                  id: getTrad("color-picker.options.advanced.requiredField.description"),
                  defaultMessage: "You won't be able to create an entry if this field is empty"
                }
              }
            ]
          }
        ]
      }
    });
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime1__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, pluginId),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};
export {
  index as default
};
//# sourceMappingURL=@strapi_plugin-color-picker_strapi-admin.js.map
