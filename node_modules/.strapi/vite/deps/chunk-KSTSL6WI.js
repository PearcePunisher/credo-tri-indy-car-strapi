import {
  adminApi,
  deleteCookie,
  setCookie
} from "./chunk-E32XYDKH.js";
import {
  createContext
} from "./chunk-G2B764WL.js";
import {
  require_lib
} from "./chunk-EPIVQ5PX.js";
import {
  createSlice
} from "./chunk-SSL4NJ75.js";
import {
  useLocation,
  useNavigate
} from "./chunk-RKN75MQZ.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/features/StrapiApp.mjs
var [StrapiAppProvider, useStrapiApp] = createContext("StrapiApp");

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/hooks/useQueryParams.mjs
var import_react = __toESM(require_react(), 1);
var import_qs = __toESM(require_lib(), 1);
var useSearch = () => {
  const { search } = useLocation();
  return (0, import_react.useMemo)(() => search, [
    search
  ]);
};
var useQueryParams = (initialParams) => {
  const search = useSearch();
  const navigate = useNavigate();
  const query = (0, import_react.useMemo)(() => {
    const searchQuery = search.startsWith("?") ? search.slice(1) : search;
    if (!search && initialParams) {
      return initialParams;
    }
    return {
      ...initialParams,
      ...(0, import_qs.parse)(searchQuery)
    };
  }, [
    search,
    initialParams
  ]);
  const setQuery = (0, import_react.useCallback)((nextParams, method = "push", replace = false) => {
    let nextQuery = {
      ...query
    };
    if (method === "remove") {
      Object.keys(nextParams).forEach((key) => {
        if (Object.prototype.hasOwnProperty.call(nextQuery, key)) {
          delete nextQuery[key];
        }
      });
    } else {
      nextQuery = {
        ...query,
        ...nextParams
      };
    }
    navigate({
      search: (0, import_qs.stringify)(nextQuery, {
        encode: false
      })
    }, {
      replace
    });
  }, [
    navigate,
    query
  ]);
  return [
    {
      query,
      rawQuery: search
    },
    setQuery
  ];
};

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/reducer.mjs
var STORAGE_KEYS = {
  TOKEN: "jwtToken",
  STATUS: "isLoggedIn"
};
var THEME_LOCAL_STORAGE_KEY = "STRAPI_THEME";
var LANGUAGE_LOCAL_STORAGE_KEY = "strapi-admin-language";
var adminSlice = createSlice({
  name: "admin",
  initialState: () => {
    return {
      language: {
        locale: "en",
        localeNames: {
          en: "English"
        }
      },
      permissions: {},
      theme: {
        availableThemes: [],
        currentTheme: localStorage.getItem(THEME_LOCAL_STORAGE_KEY) || "system"
      },
      token: null
    };
  },
  reducers: {
    setAppTheme(state, action) {
      state.theme.currentTheme = action.payload;
      window.localStorage.setItem(THEME_LOCAL_STORAGE_KEY, action.payload);
    },
    setAvailableThemes(state, action) {
      state.theme.availableThemes = action.payload;
    },
    setLocale(state, action) {
      state.language.locale = action.payload;
      window.localStorage.setItem(LANGUAGE_LOCAL_STORAGE_KEY, action.payload);
      document.documentElement.setAttribute("lang", action.payload);
    },
    setToken(state, action) {
      state.token = action.payload;
    },
    login(state, action) {
      const { token, persist } = action.payload;
      if (!persist) {
        setCookie(STORAGE_KEYS.TOKEN, token);
      } else {
        window.localStorage.setItem(STORAGE_KEYS.TOKEN, JSON.stringify(token));
      }
      window.localStorage.setItem(STORAGE_KEYS.STATUS, "true");
      state.token = token;
    },
    logout(state) {
      state.token = null;
      deleteCookie(STORAGE_KEYS.TOKEN);
      window.localStorage.removeItem(STORAGE_KEYS.TOKEN);
      window.localStorage.removeItem(STORAGE_KEYS.STATUS);
    }
  }
});
var reducer = adminSlice.reducer;
var { setAppTheme, setAvailableThemes, setLocale, setToken, logout, login } = adminSlice.actions;

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/services/auth.mjs
var authService = adminApi.enhanceEndpoints({
  addTagTypes: [
    "User",
    "Me",
    "ProvidersOptions"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    /**
    * ME
    */
    getMe: builder.query({
      query: () => ({
        method: "GET",
        url: "/admin/users/me"
      }),
      transformResponse(res) {
        return res.data;
      },
      providesTags: (res) => res ? [
        "Me",
        {
          type: "User",
          id: res.id
        }
      ] : [
        "Me"
      ]
    }),
    getMyPermissions: builder.query({
      query: () => ({
        method: "GET",
        url: "/admin/users/me/permissions"
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    updateMe: builder.mutation({
      query: (body) => ({
        method: "PUT",
        url: "/admin/users/me",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      },
      invalidatesTags: [
        "Me"
      ]
    }),
    /**
    * Permissions
    */
    checkPermissions: builder.query({
      query: (permissions) => ({
        method: "POST",
        url: "/admin/permissions/check",
        data: permissions
      })
    }),
    /**
    * Auth methods
    */
    login: builder.mutation({
      query: (body) => ({
        method: "POST",
        url: "/admin/login",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      },
      invalidatesTags: [
        "Me"
      ]
    }),
    logout: builder.mutation({
      query: () => ({
        method: "POST",
        url: "/admin/logout"
      })
    }),
    resetPassword: builder.mutation({
      query: (body) => ({
        method: "POST",
        url: "/admin/reset-password",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    renewToken: builder.mutation({
      query: (body) => ({
        method: "POST",
        url: "/admin/renew-token",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    getRegistrationInfo: builder.query({
      query: (registrationToken) => ({
        url: "/admin/registration-info",
        method: "GET",
        config: {
          params: {
            registrationToken
          }
        }
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    registerAdmin: builder.mutation({
      query: (body) => ({
        method: "POST",
        url: "/admin/register-admin",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    registerUser: builder.mutation({
      query: (body) => ({
        method: "POST",
        url: "/admin/register",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    forgotPassword: builder.mutation({
      query: (body) => ({
        url: "/admin/forgot-password",
        method: "POST",
        data: body
      })
    }),
    isSSOLocked: builder.query({
      query: () => ({
        url: "/admin/providers/isSSOLocked",
        method: "GET"
      }),
      transformResponse(res) {
        return res.data;
      }
    }),
    getProviders: builder.query({
      query: () => ({
        url: "/admin/providers",
        method: "GET"
      })
    }),
    getProviderOptions: builder.query({
      query: () => ({
        url: "/admin/providers/options",
        method: "GET"
      }),
      transformResponse(res) {
        return res.data;
      },
      providesTags: [
        "ProvidersOptions"
      ]
    }),
    updateProviderOptions: builder.mutation({
      query: (body) => ({
        url: "/admin/providers/options",
        method: "PUT",
        data: body
      }),
      transformResponse(res) {
        return res.data;
      },
      invalidatesTags: [
        "ProvidersOptions"
      ]
    })
  }),
  overrideExisting: false
});
var { useCheckPermissionsQuery, useLazyCheckPermissionsQuery, useGetMeQuery, useLoginMutation, useRenewTokenMutation, useLogoutMutation, useUpdateMeMutation, useResetPasswordMutation, useRegisterAdminMutation, useRegisterUserMutation, useGetRegistrationInfoQuery, useForgotPasswordMutation, useGetMyPermissionsQuery, useIsSSOLockedQuery, useGetProvidersQuery, useGetProviderOptionsQuery, useUpdateProviderOptionsMutation } = authService;

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/features/Auth.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var [Provider, useAuth] = createContext("Auth");

export {
  useStrapiApp,
  useQueryParams,
  reducer,
  setAppTheme,
  setLocale,
  login,
  useCheckPermissionsQuery,
  useUpdateMeMutation,
  useIsSSOLockedQuery,
  useGetProvidersQuery,
  useGetProviderOptionsQuery,
  useUpdateProviderOptionsMutation,
  useAuth
};
//# sourceMappingURL=chunk-KSTSL6WI.js.map
