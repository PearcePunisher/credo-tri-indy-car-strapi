"use strict";
const bootstrap = ({ strapi }) => {
};
const destroy = ({ strapi }) => {
};
const register = ({ strapi }) => {
};
const config = {
  default: {},
  validator() {
  }
};
const contentTypes = {};
const controller = ({ strapi }) => ({
  index(ctx) {
    ctx.body = strapi.plugin("schema-visualizer").service("service").getWelcomeMessage();
  },
  async getTypes(ctx) {
    const contentTypes2 = await strapi.plugin("schema-visualizer").service("service").getContentTypes();
    ctx.body = contentTypes2;
  }
});
const controllers = {
  controller
};
const middlewares = {};
const policies = {};
const contentAPIRoutes = [
  {
    method: "GET",
    path: "/",
    // name of the controller file & the method.
    handler: "controller.index",
    config: {
      policies: []
    }
  }
];
const adminRoutes = [
  {
    method: "GET",
    path: "/get-types",
    handler: "controller.getTypes",
    config: {
      policies: []
      // auth: false,
    }
  }
];
const routes = {
  "content-api": {
    type: "content-api",
    routes: contentAPIRoutes
  },
  "admin": {
    type: "admin",
    routes: adminRoutes
  }
};
const service = ({ strapi }) => ({
  getWelcomeMessage() {
    return "Welcome to Strapi ðŸš€";
  },
  async getContentTypes() {
    const types = strapi.contentTypes;
    let formattedTypes = Object.keys(types).map((key) => ({
      name: key,
      attributes: types[key]["attributes"],
      info: types[key]["info"],
      // kind: data[key]["kind"],
      key: types[key]["uid"]
    }));
    return formattedTypes;
  }
});
const services = {
  service
};
const index = {
  register,
  bootstrap,
  destroy,
  config,
  controllers,
  routes,
  services,
  contentTypes,
  policies,
  middlewares
};
module.exports = index;
