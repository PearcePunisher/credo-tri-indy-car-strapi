{
  "version": 3,
  "sources": ["../../../@strapi/plugin-color-picker/admin/src/components/ColorPickerIcon.tsx", "../../../@strapi/plugin-color-picker/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/plugin-color-picker/admin/src/index.ts"],
  "sourcesContent": ["import { Flex } from '@strapi/design-system';\nimport { PaintBrush } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nconst IconBox = styled(Flex)`\n  /* Hard code color values */\n  /* to stay consistent between themes */\n  background-color: #f0f0ff; /* primary100 */\n  border: 1px solid #d9d8ff; /* primary200 */\n\n  svg > path {\n    fill: #4945ff; /* primary600 */\n  }\n`;\n\nexport const ColorPickerIcon = () => {\n  return (\n    <IconBox justifyContent=\"center\" alignItems=\"center\" width={7} height={6} hasRadius aria-hidden>\n      <PaintBrush />\n    </IconBox>\n  );\n};\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "import { ColorPickerIcon } from './components/ColorPickerIcon';\nimport { pluginId } from './pluginId';\nimport { getTrad } from './utils/getTrad';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  /**\n   * TODO: we need to have the type for StrapiApp done from `@strapi/admin` package.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register(app: any) {\n    app.customFields.register({\n      name: 'color',\n      pluginId: 'color-picker',\n      type: 'string',\n      icon: ColorPickerIcon,\n      intlLabel: {\n        id: getTrad('color-picker.label'),\n        defaultMessage: 'Color',\n      },\n      intlDescription: {\n        id: getTrad('color-picker.description'),\n        defaultMessage: 'Select any color',\n      },\n      components: {\n        Input: async () =>\n          import('./components/ColorPickerInput').then((module) => ({\n            default: module.ColorPickerInput,\n          })),\n      },\n      options: {\n        advanced: [\n          {\n            intlLabel: {\n              id: getTrad('color-picker.options.advanced.regex'),\n              defaultMessage: 'RegExp pattern',\n            },\n            name: 'regex',\n            type: 'text',\n            defaultValue: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$',\n            description: {\n              id: getTrad('color-picker.options.advanced.regex.description'),\n              defaultMessage: 'The text of the regular expression',\n            },\n          },\n          {\n            sectionTitle: {\n              id: 'global.settings',\n              defaultMessage: 'Settings',\n            },\n            items: [\n              {\n                name: 'required',\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTrad('color-picker.options.advanced.requiredField'),\n                  defaultMessage: 'Required field',\n                },\n                description: {\n                  id: getTrad('color-picker.options.advanced.requiredField.description'),\n                  defaultMessage: \"You won't be able to create an entry if this field is empty\",\n                },\n              },\n            ],\n          },\n        ],\n      },\n    });\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAMA,UAAUC,GAAOC,IAAAA;;;;;;;;;;IAWVC,kBAAkB,MAAA;AAC7B,aACEC,wBAACJ,SAAAA;IAAQK,gBAAe;IAASC,YAAW;IAASC,OAAO;IAAGC,QAAQ;IAAGC,WAAS;IAACC,eAAW;IAC7F,cAAAN,wBAACO,eAAAA,CAAAA,CAAAA;;AAGP;;;ACnBMC,IAAAA,2BAA2B,CAACC,MAAmBC,cAAAA;AAInD,SAAOC,OAAOC,KAAKH,IAAAA,EAAMI,OAAO,CAACC,KAAKC,YAAAA;AACpCD,QAAI,GAAGJ,SAAAA,IAAYK,OAAQ,EAAC,IAAIN,KAAKM,OAAQ;AAC7C,WAAOD;EACT,GAAG,CAAA,CAAC;AACN;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA,IAAA,QAAe;;;;;EAKbE,SAASC,KAAQ;AACfA,QAAIC,aAAaF,SAAS;MACxBG,MAAM;MACNC,UAAU;MACVC,MAAM;MACNC,MAAMC;MACNC,WAAW;QACTC,IAAIC,QAAQ,oBAAA;QACZC,gBAAgB;MAClB;MACAC,iBAAiB;QACfH,IAAIC,QAAQ,0BAAA;QACZC,gBAAgB;MAClB;MACAE,YAAY;QACVC,OAAO,YACL,OAAO,gCAAA,EAAiCC,KAAK,CAACC,YAAY;UACxDC,SAASD,OAAOE;UAClB;MACJ;MACAC,SAAS;QACPC,UAAU;UACR;YACEZ,WAAW;cACTC,IAAIC,QAAQ,qCAAA;cACZC,gBAAgB;YAClB;YACAR,MAAM;YACNE,MAAM;YACNgB,cAAc;YACdC,aAAa;cACXb,IAAIC,QAAQ,iDAAA;cACZC,gBAAgB;YAClB;UACF;UACA;YACEY,cAAc;cACZd,IAAI;cACJE,gBAAgB;YAClB;YACAa,OAAO;cACL;gBACErB,MAAM;gBACNE,MAAM;gBACNG,WAAW;kBACTC,IAAIC,QAAQ,6CAAA;kBACZC,gBAAgB;gBAClB;gBACAW,aAAa;kBACXb,IAAIC,QAAQ,yDAAA;kBACZC,gBAAgB;gBAClB;cACF;YACD;UACH;QACD;MACH;IACF,CAAA;EACF;EACA,MAAMc,cAAc,EAAEC,QAAO,GAAyB;AACpD,UAAMC,gBAAgB,MAAMC,QAAQC,IAClCH,QAAQI,IAAI,CAACC,WAAAA;AACX,aAAO,kCAAO,kBAAkBA,MAAO,OAAM,EAC1ChB,KAAK,CAAC,EAAEE,SAASe,KAAI,MAAE;AACtB,eAAO;UACLA,MAAMC,yBAAyBD,MAAM5B,QAAAA;UACrC2B;QACF;MACF,CAAA,EACCG,MAAM,MAAA;AACL,eAAO;UACLF,MAAM,CAAA;UACND;QACF;MACF,CAAA;IACJ,CAAA,CAAA;AAGF,WAAOH,QAAQO,QAAQR,aAAAA;EACzB;AACF;",
  "names": ["IconBox", "styled", "Flex", "ColorPickerIcon", "_jsx", "justifyContent", "alignItems", "width", "height", "hasRadius", "aria-hidden", "PaintBrush", "prefixPluginTranslations", "trad", "pluginId", "Object", "keys", "reduce", "acc", "current", "register", "app", "customFields", "name", "pluginId", "type", "icon", "ColorPickerIcon", "intlLabel", "id", "getTrad", "defaultMessage", "intlDescription", "components", "Input", "then", "module", "default", "ColorPickerInput", "options", "advanced", "defaultValue", "description", "sectionTitle", "items", "registerTrads", "locales", "importedTrads", "Promise", "all", "map", "locale", "data", "prefixPluginTranslations", "catch", "resolve"]
}
