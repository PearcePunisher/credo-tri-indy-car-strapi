import {
  getTrad,
  useGetInfoQuery,
  useUpdateSettingsMutation
} from "./chunk-IXRPE6GQ.js";
import {
  PERMISSIONS
} from "./chunk-HWUKOP6W.js";
import "./chunk-PIEUP6LU.js";
import "./chunk-AK5CFNWL.js";
import "./chunk-FIZRY72E.js";
import "./chunk-Z6OTNBIX.js";
import "./chunk-M6T5TICF.js";
import "./chunk-PGURYWHK.js";
import "./chunk-JU5K55YF.js";
import "./chunk-PSUKQX43.js";
import "./chunk-GS4442RR.js";
import "./chunk-EQ7JNQ5S.js";
import "./chunk-SB4WDFMX.js";
import "./chunk-HBQEPZME.js";
import "./chunk-VWPDOT2M.js";
import "./chunk-RKVEZT4L.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-F6I7GD3C.js";
import "./chunk-XGQASAAZ.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-DK25XQZ7.js";
import "./chunk-JJJKN6DM.js";
import "./chunk-7RCMXZZG.js";
import "./chunk-ENHRN2J6.js";
import "./chunk-ITO73YQH.js";
import "./chunk-UPISBJKK.js";
import "./chunk-5DDP5CQ5.js";
import "./chunk-332H7YRY.js";
import "./chunk-HIZVCZYI.js";
import {
  useIntl
} from "./chunk-LRVODCJD.js";
import "./chunk-YGVTRKQ2.js";
import "./chunk-GGB7PTMN.js";
import "./chunk-HKFQNR26.js";
import "./chunk-RM7QJ52H.js";
import "./chunk-C7H2BX76.js";
import "./chunk-75XTHHTN.js";
import "./chunk-ZBYGYXB5.js";
import "./chunk-YXDWT3EH.js";
import "./chunk-4F4EXWVC.js";
import "./chunk-LYKGZT27.js";
import "./chunk-OESBTETY.js";
import "./chunk-6DZTTCET.js";
import "./chunk-EU6AQU45.js";
import "./chunk-QIJGNK42.js";
import "./chunk-CNUDFNNQ.js";
import "./chunk-5A2H24XY.js";
import "./chunk-XHOFERSP.js";
import "./chunk-O2S2H3OG.js";
import "./chunk-LT6WNP7O.js";
import "./chunk-ATM64ZJ6.js";
import "./chunk-D75QSA6Q.js";
import "./chunk-7EDMZMJ4.js";
import "./chunk-HZH6XC5L.js";
import "./chunk-GUW4BUGI.js";
import "./chunk-N5D6IE4S.js";
import "./chunk-3IYQ2EEJ.js";
import "./chunk-4EPKKD5Q.js";
import "./chunk-6E4MLB3W.js";
import "./chunk-X544JNLD.js";
import {
  useRBAC
} from "./chunk-BFEZFFEC.js";
import "./chunk-ZMVMKL7O.js";
import "./chunk-X6SZFROP.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-RHGSFS4X.js";
import "./chunk-IHX36XRG.js";
import "./chunk-T2ARN7TZ.js";
import "./chunk-KW3KTYN5.js";
import "./chunk-IOFG7AGK.js";
import {
  Form,
  Formik
} from "./chunk-6MCQ77JQ.js";
import "./chunk-3K3HBFOK.js";
import "./chunk-ON4SY4JD.js";
import "./chunk-3B4ZVOCF.js";
import {
  errorsTrads
} from "./chunk-IFOFBKTA.js";
import {
  create3 as create,
  create4 as create2,
  create6 as create3
} from "./chunk-EM35XQES.js";
import "./chunk-U2S4VNVE.js";
import "./chunk-NJAQPYGF.js";
import {
  Layouts
} from "./chunk-LYW6GFGD.js";
import "./chunk-UNWIXXSH.js";
import "./chunk-HL7GHNPB.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-PQINNV4N.js";
import "./chunk-FPU5PDM4.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-GPGHNWQ2.js";
import "./chunk-XHNJEN3K.js";
import "./chunk-ZBSF5PSY.js";
import {
  useNotification
} from "./chunk-WEVFGB5K.js";
import "./chunk-QFPJ4JPQ.js";
import "./chunk-NL2C7LWQ.js";
import "./chunk-V3H6CYGR.js";
import "./chunk-KTKIRFL6.js";
import "./chunk-HM5YIFDI.js";
import "./chunk-QOUV5O5E.js";
import "./chunk-BTMBKEG7.js";
import "./chunk-7K6WC7UG.js";
import "./chunk-RKN75MQZ.js";
import {
  Box,
  Button,
  Field,
  Flex,
  Grid,
  Main,
  TextInput,
  Toggle,
  Typography
} from "./chunk-46IFOU3F.js";
import {
  ForwardRef$3B,
  ForwardRef$3D,
  ForwardRef$4F
} from "./chunk-Q5ULD7QJ.js";
import "./chunk-AWHRF5BE.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-3LBZKDTB.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);

// node_modules/@strapi/plugin-documentation/dist/admin/components/SettingsForm.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var schema = create3().shape({
  restrictedAccess: create(),
  password: create2().when("restrictedAccess", (value, initSchema) => {
    return value ? initSchema.required(errorsTrads.required.id).min(8).matches(/[a-z]/, "components.Input.error.contain.lowercase").matches(/[A-Z]/, "components.Input.error.contain.uppercase").matches(/\d/, "components.Input.error.contain.number") : initSchema;
  })
});
var FieldActionWrapper = dt(Field.Action)`
  svg {
    height: 1.6rem;
    width: 1.6rem;
    path {
      fill: ${({ theme }) => theme.colors.neutral600};
    }
  }
`;
var SettingsForm = ({ data, onSubmit }) => {
  const { formatMessage } = useIntl();
  const [passwordShown, setPasswordShown] = React.useState(false);
  const { allowedActions } = useRBAC(PERMISSIONS);
  return (0, import_jsx_runtime.jsx)(Formik, {
    enableReinitialize: true,
    initialValues: {
      restrictedAccess: (data == null ? void 0 : data.documentationAccess.restrictedAccess) || false,
      password: ""
    },
    onSubmit,
    validationSchema: schema,
    children: ({ handleSubmit, values, handleChange, errors, setFieldTouched, setFieldValue, setFieldError, dirty }) => {
      return (0, import_jsx_runtime.jsxs)(Form, {
        noValidate: true,
        onSubmit: handleSubmit,
        children: [
          (0, import_jsx_runtime.jsx)(Layouts.Header, {
            title: formatMessage({
              id: getTrad("plugin.name"),
              defaultMessage: "Documentation"
            }),
            subtitle: formatMessage({
              id: getTrad("pages.SettingsPage.header.description"),
              defaultMessage: "Configure the documentation plugin"
            }),
            primaryAction: (0, import_jsx_runtime.jsx)(Button, {
              type: "submit",
              startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4F, {}),
              disabled: !dirty && allowedActions.canUpdate,
              children: formatMessage({
                id: getTrad("pages.SettingsPage.Button.save"),
                defaultMessage: "Save"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Layouts.Content, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              background: "neutral0",
              hasRadius: true,
              shadow: "filterShadow",
              paddingTop: 6,
              paddingBottom: 6,
              paddingLeft: 7,
              paddingRight: 7,
              children: (0, import_jsx_runtime.jsxs)(Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: 4,
                children: [
                  (0, import_jsx_runtime.jsx)(Typography, {
                    variant: "delta",
                    tag: "h2",
                    children: formatMessage({
                      id: "global.settings",
                      defaultMessage: "Settings"
                    })
                  }),
                  (0, import_jsx_runtime.jsxs)(Grid.Root, {
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "restrictedAccess",
                          hint: formatMessage({
                            id: getTrad("pages.SettingsPage.toggle.hint"),
                            defaultMessage: "Make the documentation endpoint private"
                          }),
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: getTrad("pages.SettingsPage.toggle.label"),
                                defaultMessage: "Restricted Access"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Toggle, {
                              checked: values.restrictedAccess,
                              onChange: () => {
                                if (values.restrictedAccess === true) {
                                  setFieldValue("password", "", false);
                                  setFieldTouched("password", false, false);
                                  setFieldError("password", void 0);
                                }
                                setFieldValue("restrictedAccess", !values.restrictedAccess, false);
                              },
                              onLabel: "On",
                              offLabel: "Off"
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Hint, {})
                          ]
                        })
                      }),
                      values.restrictedAccess && (0, import_jsx_runtime.jsx)(Grid.Item, {
                        col: 6,
                        s: 12,
                        direction: "column",
                        alignItems: "stretch",
                        children: (0, import_jsx_runtime.jsxs)(Field.Root, {
                          name: "password",
                          error: errors.password ? formatMessage({
                            id: errors.password,
                            defaultMessage: errors.password
                          }) : void 0,
                          children: [
                            (0, import_jsx_runtime.jsx)(Field.Label, {
                              children: formatMessage({
                                id: "global.password",
                                defaultMessage: "Password"
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(TextInput, {
                              placeholder: "**********",
                              type: passwordShown ? "text" : "password",
                              value: values.password,
                              onChange: handleChange,
                              endAction: (0, import_jsx_runtime.jsx)(FieldActionWrapper, {
                                onClick: (e) => {
                                  e.stopPropagation();
                                  setPasswordShown((prev) => !prev);
                                },
                                label: formatMessage(passwordShown ? {
                                  id: "Auth.form.password.show-password",
                                  defaultMessage: "Show password"
                                } : {
                                  id: "Auth.form.password.hide-password",
                                  defaultMessage: "Hide password"
                                }),
                                children: passwordShown ? (0, import_jsx_runtime.jsx)(ForwardRef$3D, {}) : (0, import_jsx_runtime.jsx)(ForwardRef$3B, {})
                              })
                            }),
                            (0, import_jsx_runtime.jsx)(Field.Error, {})
                          ]
                        })
                      })
                    ]
                  })
                ]
              })
            })
          })
        ]
      });
    }
  });
};

// node_modules/@strapi/plugin-documentation/dist/admin/utils/baseQuery.mjs
var isBaseQueryError = (error) => {
  return error.name !== void 0;
};

// node_modules/@strapi/plugin-documentation/dist/admin/pages/Settings.mjs
var SettingsPage = () => {
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const { _unstableFormatAPIError: formatAPIError, _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();
  const { data, isError, isLoading, isFetching } = useGetInfoQuery();
  const [updateSettings] = useUpdateSettingsMutation();
  const onUpdateSettings = async (body, formik) => {
    return updateSettings({
      body
    }).unwrap().then(() => {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.update.success"),
          defaultMessage: "Successfully updated settings"
        })
      });
    }).catch((err) => {
      if (isBaseQueryError(err) && err.name === "ValidationError") {
        toggleNotification({
          type: "danger",
          message: formatAPIError(err)
        });
      }
    });
  };
  if (isLoading || isFetching) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (isError) {
    return (0, import_jsx_runtime2.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime2.jsx)(Main, {
    children: (0, import_jsx_runtime2.jsx)(SettingsForm, {
      data,
      onSubmit: onUpdateSettings
    })
  });
};
export {
  SettingsPage
};
//# sourceMappingURL=Settings-QZ6JWHGP.js.map
