import {
  locale_exports
} from "./chunk-L5PDS773.js";
import {
  useRegenerateTokenMutation
} from "./chunk-4U37KWGD.js";
import {
  tours,
  unstableUseGuidedTour
} from "./chunk-2QF7GWI7.js";
import {
  ContentBox,
  useClipboard
} from "./chunk-CXIWR67T.js";
import {
  ConfirmDialog
} from "./chunk-4MIYXIFM.js";
import {
  addDays,
  format
} from "./chunk-TU46OWTP.js";
import {
  BackButton
} from "./chunk-2VU3JEGV.js";
import {
  Layouts
} from "./chunk-4L647434.js";
import {
  useTracking
} from "./chunk-HPFW6ALG.js";
import {
  useAPIErrorHandler
} from "./chunk-TNCFEWFQ.js";
import {
  useNotification
} from "./chunk-EJNLJZBT.js";
import {
  useIntl
} from "./chunk-V5B6IART.js";
import {
  Box,
  Button,
  Dialog,
  Field,
  Flex,
  IconButton,
  SingleSelect,
  SingleSelectOption,
  TextInput,
  Textarea,
  TooltipImpl,
  Typography
} from "./chunk-EEEY2MTU.js";
import {
  ForwardRef$2D,
  ForwardRef$3J,
  ForwardRef$3L,
  ForwardRef$3Z,
  ForwardRef$4N,
  ForwardRef$5v
} from "./chunk-RJW6B5XN.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-OSJEGB6V.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/FormHead.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var Regenerate = ({ onRegenerate, url }) => {
  const { formatMessage } = useIntl();
  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);
  const [isLoadingConfirmation, setIsLoadingConfirmation] = React.useState(false);
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const [regenerateToken] = useRegenerateTokenMutation();
  const regenerateData = async () => {
    try {
      const res = await regenerateToken(url);
      if ("error" in res) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
        return;
      }
      if (onRegenerate) {
        onRegenerate(res.data.accessKey);
      }
    } catch (error) {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "Something went wrong"
        })
      });
    } finally {
      setIsLoadingConfirmation(false);
    }
  };
  const handleConfirmRegeneration = async () => {
    regenerateData();
    setShowConfirmDialog(false);
  };
  return (0, import_jsx_runtime.jsxs)(Dialog.Root, {
    open: showConfirmDialog,
    onOpenChange: setShowConfirmDialog,
    children: [
      (0, import_jsx_runtime.jsx)(Dialog.Trigger, {
        children: (0, import_jsx_runtime.jsx)(Button, {
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$5v, {}),
          type: "button",
          size: "S",
          variant: "tertiary",
          onClick: () => setShowConfirmDialog(true),
          name: "regenerate",
          children: formatMessage({
            id: "Settings.tokens.regenerate",
            defaultMessage: "Regenerate"
          })
        })
      }),
      (0, import_jsx_runtime.jsx)(ConfirmDialog, {
        title: formatMessage({
          id: "Settings.tokens.RegenerateDialog.title",
          defaultMessage: "Regenerate token"
        }),
        endAction: (0, import_jsx_runtime.jsx)(Button, {
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$5v, {}),
          loading: isLoadingConfirmation,
          onClick: handleConfirmRegeneration,
          children: formatMessage({
            id: "Settings.tokens.Button.regenerate",
            defaultMessage: "Regenerate"
          })
        }),
        children: formatMessage({
          id: "Settings.tokens.popUpWarning.message",
          defaultMessage: "Are you sure you want to regenerate this token?"
        })
      })
    ]
  });
};
var FormHead = ({ title, token, setToken, toggleToken, showToken, canShowToken, canEditInputs, canRegenerate, isSubmitting, regenerateUrl }) => {
  const { formatMessage } = useIntl();
  const handleRegenerate = (newKey) => {
    setToken({
      ...token,
      accessKey: newKey
    });
    toggleToken == null ? void 0 : toggleToken();
  };
  return (0, import_jsx_runtime.jsx)(Layouts.Header, {
    title: (token == null ? void 0 : token.name) || formatMessage(title),
    primaryAction: canEditInputs ? (0, import_jsx_runtime.jsxs)(Flex, {
      gap: 2,
      children: [
        canRegenerate && (token == null ? void 0 : token.id) && (0, import_jsx_runtime.jsx)(Regenerate, {
          onRegenerate: handleRegenerate,
          url: `${regenerateUrl}${(token == null ? void 0 : token.id) ?? ""}`
        }),
        (token == null ? void 0 : token.id) && toggleToken && (0, import_jsx_runtime.jsx)(TooltipImpl, {
          label: !canShowToken && formatMessage({
            id: "Settings.tokens.encryptionKeyMissing",
            defaultMessage: "In order to view the token, you need a valid encryption key in the admin configuration"
          }),
          children: (0, import_jsx_runtime.jsx)(Button, {
            type: "button",
            startIcon: showToken ? (0, import_jsx_runtime.jsx)(ForwardRef$3J, {}) : (0, import_jsx_runtime.jsx)(ForwardRef$3L, {}),
            variant: "secondary",
            onClick: () => toggleToken == null ? void 0 : toggleToken(),
            disabled: !canShowToken,
            children: formatMessage({
              id: "Settings.tokens.viewToken",
              defaultMessage: "View token"
            })
          })
        }),
        (0, import_jsx_runtime.jsx)(Button, {
          disabled: isSubmitting,
          loading: isSubmitting,
          startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
          type: "submit",
          size: "S",
          children: formatMessage({
            id: "global.save",
            defaultMessage: "Save"
          })
        })
      ]
    }) : canRegenerate && (token == null ? void 0 : token.id) && (0, import_jsx_runtime.jsx)(Regenerate, {
      onRegenerate: handleRegenerate,
      url: `${regenerateUrl}${(token == null ? void 0 : token.id) ?? ""}`
    }),
    navigationAction: (0, import_jsx_runtime.jsx)(BackButton, {}),
    ellipsis: true
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/TokenBox.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var TypographyWordBreak = dt(Typography)`
  word-break: break-all;
`;
var UnstableApiTokenBox = ({ token, tokenType }) => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { trackUsage } = useTracking();
  const dispatch = unstableUseGuidedTour("TokenBox", (s) => s.dispatch);
  const { copy } = useClipboard();
  const handleClick = (token2) => async () => {
    if (token2) {
      const didCopy = await copy(token2);
      if (didCopy) {
        trackUsage("didCopyTokenKey", {
          tokenType
        });
        dispatch({
          type: "set_completed_actions",
          payload: [
            "didCopyApiToken"
          ]
        });
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "Settings.tokens.notification.copied"
          })
        });
      }
    }
  };
  return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {
    children: (0, import_jsx_runtime2.jsxs)(Flex, {
      shadow: "tableShadow",
      direction: "column",
      alignItems: "start",
      hasRadius: true,
      padding: 6,
      background: "neutral0",
      children: [
        (0, import_jsx_runtime2.jsxs)(Flex, {
          direction: "column",
          alignItems: "start",
          gap: 1,
          paddingBottom: 4,
          children: [
            (0, import_jsx_runtime2.jsx)(Typography, {
              fontWeight: "bold",
              children: formatMessage({
                id: "Settings.tokens.copy.title",
                defaultMessage: "Token"
              })
            }),
            (0, import_jsx_runtime2.jsx)(Typography, {
              children: formatMessage({
                id: "Settings.tokens.copy.lastWarning",
                defaultMessage: "Make sure to copy this token, you wonâ€™t be able to see it again!"
              })
            })
          ]
        }),
        (0, import_jsx_runtime2.jsx)(Box, {
          background: "neutral100",
          hasRadius: true,
          padding: 2,
          borderColor: "neutral150",
          children: (0, import_jsx_runtime2.jsx)(TypographyWordBreak, {
            fontWeight: "semiBold",
            variant: "pi",
            children: token
          })
        }),
        (0, import_jsx_runtime2.jsx)(tours.apiTokens.CopyAPIToken, {
          children: (0, import_jsx_runtime2.jsx)(Button, {
            startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$3Z, {}),
            variant: "secondary",
            onClick: handleClick(token),
            marginTop: 6,
            children: formatMessage({
              id: "Settings.tokens.copy.copy",
              defaultMessage: "Copy"
            })
          })
        })
      ]
    })
  });
};
var TokenBox = ({ token, tokenType }) => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { trackUsage } = useTracking();
  const { copy } = useClipboard();
  const handleClick = (token2) => async () => {
    if (token2) {
      const didCopy = await copy(token2);
      if (didCopy) {
        trackUsage("didCopyTokenKey", {
          tokenType
        });
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "Settings.tokens.notification.copied"
          })
        });
      }
    }
  };
  return (0, import_jsx_runtime2.jsx)(ContentBox, {
    endAction: token && (0, import_jsx_runtime2.jsx)("span", {
      style: {
        alignSelf: "start"
      },
      children: (0, import_jsx_runtime2.jsx)(IconButton, {
        label: formatMessage({
          id: "app.component.CopyToClipboard.label",
          defaultMessage: "Copy to clipboard"
        }),
        onClick: handleClick(token),
        variant: "ghost",
        type: "button",
        style: {
          padding: 0,
          height: "1.6rem"
        },
        children: (0, import_jsx_runtime2.jsx)(ForwardRef$3Z, {})
      })
    }),
    title: token || formatMessage({
      id: "Settings.tokens.copy.editTitle",
      defaultMessage: "This token isnâ€™t accessible anymore."
    }),
    subtitle: token ? formatMessage(tokenType === "api-token" ? {
      id: "Settings.tokens.copy.subtitle",
      defaultMessage: "Copy this token for use elsewhere"
    } : {
      id: "Settings.tokens.copy.lastWarning",
      defaultMessage: "Make sure to copy this token, you wonâ€™t be able to see it again!"
    }) : formatMessage({
      id: "Settings.tokens.copy.editMessage",
      defaultMessage: "For security reasons, you can only see your token once."
    }),
    icon: (0, import_jsx_runtime2.jsx)(ForwardRef$2D, {}),
    iconBackground: "neutral100"
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/LifeSpanInput.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/utils/locales.mjs
var getDateFnsLocaleName = (locale) => {
  if (Object.keys(locale_exports).includes(locale)) {
    return locale;
  }
  return "enUS";
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/pages/ApiTokens/EditView/utils/getDateOfExpiration.mjs
var getDateOfExpiration = (createdAt, duration, language = "en") => {
  if (duration && typeof duration === "number") {
    const durationInDays = duration / 24 / 60 / 60 / 1e3;
    return format(addDays(new Date(createdAt), durationInDays), "PPP", {
      locale: locale_exports[getDateFnsLocaleName(language)]
    });
  }
  return "Unlimited";
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/utils/forms.mjs
var isErrorMessageMessageDescriptor = (message) => {
  return typeof message === "object" && message !== null && "id" in message;
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/LifeSpanInput.mjs
var LifeSpanInput = ({ token, error, value, onChange, isCreating }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
    children: [
      (0, import_jsx_runtime3.jsxs)(Field.Root, {
        error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
          id: error,
          defaultMessage: error
        }) : void 0,
        name: "lifespan",
        required: true,
        children: [
          (0, import_jsx_runtime3.jsx)(Field.Label, {
            children: formatMessage({
              id: "Settings.tokens.form.duration",
              defaultMessage: "Token duration"
            })
          }),
          (0, import_jsx_runtime3.jsxs)(SingleSelect, {
            value,
            onChange: (value2) => {
              onChange({
                target: {
                  name: "lifespan",
                  value: value2
                }
              });
            },
            disabled: !isCreating,
            placeholder: "Select",
            children: [
              (0, import_jsx_runtime3.jsx)(SingleSelectOption, {
                value: "604800000",
                children: formatMessage({
                  id: "Settings.tokens.duration.7-days",
                  defaultMessage: "7 days"
                })
              }),
              (0, import_jsx_runtime3.jsx)(SingleSelectOption, {
                value: "2592000000",
                children: formatMessage({
                  id: "Settings.tokens.duration.30-days",
                  defaultMessage: "30 days"
                })
              }),
              (0, import_jsx_runtime3.jsx)(SingleSelectOption, {
                value: "7776000000",
                children: formatMessage({
                  id: "Settings.tokens.duration.90-days",
                  defaultMessage: "90 days"
                })
              }),
              (0, import_jsx_runtime3.jsx)(SingleSelectOption, {
                value: "0",
                children: formatMessage({
                  id: "Settings.tokens.duration.unlimited",
                  defaultMessage: "Unlimited"
                })
              })
            ]
          }),
          (0, import_jsx_runtime3.jsx)(Field.Error, {})
        ]
      }),
      (0, import_jsx_runtime3.jsx)(Typography, {
        variant: "pi",
        textColor: "neutral600",
        children: !isCreating && `${formatMessage({
          id: "Settings.tokens.duration.expiration-date",
          defaultMessage: "Expiration date"
        })}: ${getDateOfExpiration(token == null ? void 0 : token.createdAt, parseInt(value ?? "", 10))}`
      })
    ]
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/TokenDescription.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var TokenDescription = ({ error, value, onChange, canEditInputs }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime4.jsxs)(Field.Root, {
    name: "description",
    error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
      id: error,
      defaultMessage: error
    }) : void 0,
    children: [
      (0, import_jsx_runtime4.jsx)(Field.Label, {
        children: formatMessage({
          id: "Settings.tokens.form.description",
          defaultMessage: "Description"
        })
      }),
      (0, import_jsx_runtime4.jsx)(Textarea, {
        onChange,
        disabled: !canEditInputs,
        value
      }),
      (0, import_jsx_runtime4.jsx)(Field.Error, {})
    ]
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/TokenName.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var TokenName = ({ error, value, onChange, canEditInputs }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime5.jsxs)(Field.Root, {
    name: "name",
    error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
      id: error,
      defaultMessage: error
    }) : void 0,
    required: true,
    children: [
      (0, import_jsx_runtime5.jsx)(Field.Label, {
        children: formatMessage({
          id: "Settings.tokens.form.name",
          defaultMessage: "Name"
        })
      }),
      (0, import_jsx_runtime5.jsx)(TextInput, {
        onChange,
        value,
        disabled: !canEditInputs
      }),
      (0, import_jsx_runtime5.jsx)(Field.Error, {})
    ]
  });
};

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/TokenTypeSelect.mjs
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var TokenTypeSelect = ({ name = "type", error, value, onChange, canEditInputs, options = [], label }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime6.jsxs)(Field.Root, {
    error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
      id: error,
      defaultMessage: error
    }) : void 0,
    name,
    required: true,
    children: [
      (0, import_jsx_runtime6.jsx)(Field.Label, {
        children: formatMessage({
          id: label.id,
          defaultMessage: label.defaultMessage
        })
      }),
      (0, import_jsx_runtime6.jsx)(SingleSelect, {
        value,
        onChange,
        placeholder: "Select",
        disabled: !canEditInputs,
        children: options && options.map(({ value: value2, label: label2 }) => (0, import_jsx_runtime6.jsx)(SingleSelectOption, {
          value: value2,
          children: formatMessage(label2)
        }, value2))
      }),
      (0, import_jsx_runtime6.jsx)(Field.Error, {})
    ]
  });
};

export {
  FormHead,
  UnstableApiTokenBox,
  TokenBox,
  LifeSpanInput,
  TokenDescription,
  TokenName,
  TokenTypeSelect
};
//# sourceMappingURL=chunk-2KJMOTGG.js.map
