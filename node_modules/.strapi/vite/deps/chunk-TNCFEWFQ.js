import {
  ForwardRef$H,
  ForwardRef$J
} from "./chunk-MSZWIWYK.js";
import {
  useAuth,
  useCheckPermissionsQuery
} from "./chunk-2YE3LUOY.js";
import {
  useNotification
} from "./chunk-EJNLJZBT.js";
import {
  setIn
} from "./chunk-V3H6CYGR.js";
import {
  useIntl
} from "./chunk-V5B6IART.js";
import {
  Box,
  EmptyStateLayout,
  Flex,
  Loader,
  Main
} from "./chunk-EEEY2MTU.js";
import {
  ForwardRef$5
} from "./chunk-RJW6B5XN.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/useAPIErrorHandler.mjs
var React = __toESM(require_react(), 1);

// node_modules/@strapi/admin/dist/admin/admin/src/utils/getPrefixedId.mjs
function getPrefixedId(message, callback) {
  const prefixedMessage = `apiError.${message}`;
  if (typeof callback === "function") {
    return callback(prefixedMessage);
  }
  return prefixedMessage;
}

// node_modules/@strapi/admin/dist/admin/admin/src/utils/normalizeAPIError.mjs
function normalizeError(error, { name, intlMessagePrefixCallback }) {
  const { message } = error;
  const normalizedError = {
    id: getPrefixedId(message, intlMessagePrefixCallback),
    defaultMessage: message,
    name: error.name ?? name,
    values: {}
  };
  if ("path" in error) {
    normalizedError.values = {
      path: error.path.join(".")
    };
  }
  return normalizedError;
}
var validateErrorIsYupValidationError = (err) => typeof err.details === "object" && err.details !== null && "errors" in err.details;
function normalizeAPIError(apiError, intlMessagePrefixCallback) {
  var _a, _b;
  const error = (_b = (_a = apiError.response) == null ? void 0 : _a.data) == null ? void 0 : _b.error;
  if (error) {
    if (validateErrorIsYupValidationError(error)) {
      return {
        name: error.name,
        message: (error == null ? void 0 : error.message) || null,
        errors: error.details.errors.map((err) => normalizeError(err, {
          name: error.name,
          intlMessagePrefixCallback
        }))
      };
    }
    return normalizeError(error, {
      intlMessagePrefixCallback
    });
  }
  return null;
}

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/useAPIErrorHandler.mjs
function useAPIErrorHandler(intlMessagePrefixCallback) {
  const { formatMessage } = useIntl();
  const formatError = React.useCallback((error) => {
    try {
      const formattedErr = formatAPIError(error, {
        intlMessagePrefixCallback,
        formatMessage
      });
      if (!formattedErr) {
        return formatFetchError(error, {
          intlMessagePrefixCallback,
          formatMessage
        });
      }
      return formattedErr;
    } catch (_) {
      throw new Error("formatAPIError: Unknown error:", error);
    }
  }, [
    formatMessage,
    intlMessagePrefixCallback
  ]);
  return {
    /**
    * @alpha
    * Convert ValidationErrors from the API into an object that can be used by forms.
    */
    _unstableFormatValidationErrors: React.useCallback((error) => {
      if (typeof error.details === "object" && error.details !== null) {
        if ("errors" in error.details && Array.isArray(error.details.errors)) {
          const validationErrors = error.details.errors;
          return validationErrors.reduce((acc, err) => {
            const { path, message } = err;
            return setIn(acc, path.join("."), message);
          }, {});
        } else {
          const details = error.details;
          return Object.keys(details).reduce((acc, key) => {
            const messages = details[key];
            return {
              ...acc,
              [key]: messages.join(", ")
            };
          }, {});
        }
      } else {
        return {};
      }
    }, []),
    /**
    * @alpha
    * This handles the errors given from `redux-toolkit`'s axios based baseQuery function.
    */
    _unstableFormatAPIError: React.useCallback((error) => {
      const err = {
        response: {
          data: {
            error
          }
        }
      };
      if (!error.message) {
        return "Unknown error occured.";
      }
      return formatError(err);
    }, [
      formatError
    ]),
    formatAPIError: formatError
  };
}
function formatFetchError(error, { intlMessagePrefixCallback, formatMessage }) {
  const { code, message } = error;
  return formatMessage({
    id: getPrefixedId(message, intlMessagePrefixCallback),
    defaultMessage: message
  }, {
    code
  });
}
function formatAPIError(error, { formatMessage, intlMessagePrefixCallback }) {
  if (!formatMessage) {
    throw new Error("The formatMessage callback is a mandatory argument.");
  }
  const normalizedError = normalizeAPIError(error, intlMessagePrefixCallback);
  if (!normalizedError) {
    return null;
  }
  if ("message" in normalizedError && normalizedError.message !== null) {
    return normalizedError.message;
  }
  if ("errors" in normalizedError) {
    return normalizedError.errors.map(({ id, defaultMessage, values }) => formatMessage({
      id,
      defaultMessage
    }, values)).join("\n");
  }
  return formatMessage(normalizedError);
}

// node_modules/@strapi/admin/dist/admin/admin/src/components/PageHelpers.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var PageMain = ({ children, ...restProps }) => {
  return (0, import_jsx_runtime.jsx)(Main, {
    ...restProps,
    children
  });
};
var Loading = ({ children = "Loading content." }) => {
  return (0, import_jsx_runtime.jsx)(PageMain, {
    height: "100vh",
    "aria-busy": true,
    children: (0, import_jsx_runtime.jsx)(Flex, {
      alignItems: "center",
      height: "100%",
      justifyContent: "center",
      children: (0, import_jsx_runtime.jsx)(Loader, {
        children
      })
    })
  });
};
var Error2 = (props) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(PageMain, {
    height: "100%",
    children: (0, import_jsx_runtime.jsx)(Flex, {
      alignItems: "center",
      height: "100%",
      justifyContent: "center",
      children: (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
        icon: (0, import_jsx_runtime.jsx)(ForwardRef$5, {
          width: "16rem"
        }),
        content: formatMessage({
          id: "anErrorOccurred",
          defaultMessage: "Whoops! Something went wrong. Please, try again."
        }),
        ...props
      })
    })
  });
};
var NoPermissions = (props) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(PageMain, {
    height: "100%",
    children: (0, import_jsx_runtime.jsx)(Flex, {
      alignItems: "center",
      height: "100%",
      justifyContent: "center",
      children: (0, import_jsx_runtime.jsx)(Box, {
        minWidth: "50%",
        children: (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
          icon: (0, import_jsx_runtime.jsx)(ForwardRef$H, {
            width: "16rem"
          }),
          content: formatMessage({
            id: "app.components.EmptyStateLayout.content-permissions",
            defaultMessage: "You don't have the permissions to access that content"
          }),
          ...props
        })
      })
    })
  });
};
var NoData = (props) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(PageMain, {
    height: "100%",
    background: "neutral100",
    children: (0, import_jsx_runtime.jsx)(Flex, {
      alignItems: "center",
      height: "100%",
      width: "100%",
      justifyContent: "center",
      children: (0, import_jsx_runtime.jsx)(Box, {
        minWidth: "50%",
        children: (0, import_jsx_runtime.jsx)(EmptyStateLayout, {
          icon: (0, import_jsx_runtime.jsx)(ForwardRef$J, {
            width: "16rem"
          }),
          action: props.action,
          content: formatMessage({
            id: "app.components.EmptyStateLayout.content-document",
            defaultMessage: "No content found"
          }),
          ...props
        })
      })
    })
  });
};
var Protect = ({ permissions = [], children }) => {
  const userPermissions = useAuth("Protect", (state) => state.permissions);
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError2 } = useAPIErrorHandler();
  const matchingPermissions = userPermissions.filter((permission) => permissions.findIndex((perm) => perm.action === permission.action && perm.subject === permission.subject) >= 0);
  const shouldCheckConditions = matchingPermissions.some((perm) => Array.isArray(perm.conditions) && perm.conditions.length > 0);
  const { isLoading, error, data } = useCheckPermissionsQuery({
    permissions: matchingPermissions.map((perm) => ({
      action: perm.action,
      subject: perm.subject
    }))
  }, {
    skip: !shouldCheckConditions
  });
  React2.useEffect(() => {
    if (error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError2(error)
      });
    }
  }, [
    error,
    formatAPIError2,
    toggleNotification
  ]);
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Loading, {});
  }
  if (error) {
    return (0, import_jsx_runtime.jsx)(Error2, {});
  }
  const { data: permissionsData } = data || {};
  const canAccess = shouldCheckConditions && permissionsData ? !permissionsData.includes(false) : matchingPermissions.length > 0;
  if (!canAccess) {
    return (0, import_jsx_runtime.jsx)(NoPermissions, {});
  }
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: typeof children === "function" ? children({
      permissions: matchingPermissions
    }) : children
  });
};
var Title = ({ children: title }) => {
  React2.useEffect(() => {
    document.title = `${title} | Strapi`;
  }, [
    title
  ]);
  return null;
};
var Page = {
  Error: Error2,
  Loading,
  NoPermissions,
  Protect,
  NoData,
  Main: PageMain,
  Title
};

export {
  useAPIErrorHandler,
  Page
};
//# sourceMappingURL=chunk-TNCFEWFQ.js.map
