import {
  createApi,
  require_lib,
  require_pipe
} from "./chunk-EPIVQ5PX.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/utils/cookies.mjs
var getCookieValue = (name) => {
  let result = null;
  const cookieArray = document.cookie.split(";");
  cookieArray.forEach((cookie) => {
    const [key, value] = cookie.split("=").map((item) => item.trim());
    if (key === name) {
      result = decodeURIComponent(value);
    }
  });
  return result;
};
var setCookie = (name, value, days) => {
  let expires = "";
  document.cookie = `${name}=${encodeURIComponent(value)}; Path=/${expires}`;
};
var deleteCookie = (name) => {
  document.cookie = `${name}=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
};

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/utils/getFetchClient.mjs
var import_pipe = __toESM(require_pipe(), 1);
var import_qs = __toESM(require_lib(), 1);
var STORAGE_KEYS = {
  TOKEN: "jwtToken",
  USER: "userInfo"
};
var FetchError = class _FetchError extends Error {
  constructor(message, response) {
    var _a, _b, _c, _d;
    super(message);
    this.name = "FetchError";
    this.message = message;
    this.response = response;
    this.code = (_b = (_a = response == null ? void 0 : response.data) == null ? void 0 : _a.error) == null ? void 0 : _b.status;
    this.status = (_d = (_c = response == null ? void 0 : response.data) == null ? void 0 : _c.error) == null ? void 0 : _d.status;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, _FetchError);
    }
  }
};
var isFetchError = (error) => {
  return error instanceof FetchError;
};
var getToken = () => {
  const fromLocalStorage = localStorage.getItem(STORAGE_KEYS.TOKEN);
  if (fromLocalStorage) {
    return JSON.parse(fromLocalStorage);
  }
  const fromCookie = getCookieValue(STORAGE_KEYS.TOKEN);
  return fromCookie ?? null;
};
var getFetchClient = (defaultOptions = {}) => {
  const backendURL = window.strapi.backendURL;
  const defaultHeader = {
    Accept: "application/json",
    "Content-Type": "application/json",
    Authorization: `Bearer ${getToken()}`
  };
  const isFormDataRequest = (body) => body instanceof FormData;
  const addPrependingSlash = (url) => url.charAt(0) !== "/" ? `/${url}` : url;
  const hasProtocol = (url) => new RegExp("^(?:[a-z+]+:)?//", "i").test(url);
  const normalizeUrl = (url) => hasProtocol(url) ? url : addPrependingSlash(url);
  const responseInterceptor = async (response, validateStatus) => {
    try {
      const result = await response.json();
      if (!response.ok && result.error && !(validateStatus == null ? void 0 : validateStatus(response.status))) {
        throw new FetchError(result.error.message, {
          data: result
        });
      }
      if (!response.ok && !(validateStatus == null ? void 0 : validateStatus(response.status))) {
        throw new FetchError("Unknown Server Error");
      }
      return {
        data: result
      };
    } catch (error) {
      if (error instanceof SyntaxError && response.ok) {
        return {
          data: [],
          status: response.status
        };
      } else {
        throw error;
      }
    }
  };
  const paramsSerializer = (params) => (url) => {
    if (params) {
      if (typeof params === "string") {
        return `${url}?${params}`;
      }
      const serializedParams = import_qs.default.stringify(params, {
        encode: false
      });
      return `${url}?${serializedParams}`;
    }
    return url;
  };
  const addBaseUrl = (url) => {
    return `${backendURL}${url}`;
  };
  const makeCreateRequestUrl = (options) => (0, import_pipe.default)(normalizeUrl, addBaseUrl, paramsSerializer(options == null ? void 0 : options.params));
  const fetchClient = {
    get: async (url, options) => {
      const headers = new Headers({
        ...defaultHeader,
        ...options == null ? void 0 : options.headers
      });
      const createRequestUrl = makeCreateRequestUrl(options);
      const response = await fetch(createRequestUrl(url), {
        signal: (options == null ? void 0 : options.signal) ?? defaultOptions.signal,
        method: "GET",
        headers
      });
      return responseInterceptor(response, options == null ? void 0 : options.validateStatus);
    },
    post: async (url, data, options) => {
      const headers = new Headers({
        ...defaultHeader,
        ...options == null ? void 0 : options.headers
      });
      const createRequestUrl = makeCreateRequestUrl(options);
      if (isFormDataRequest(data)) {
        headers.delete("Content-Type");
      }
      const response = await fetch(createRequestUrl(url), {
        signal: (options == null ? void 0 : options.signal) ?? defaultOptions.signal,
        method: "POST",
        headers,
        body: isFormDataRequest(data) ? data : JSON.stringify(data)
      });
      return responseInterceptor(response, options == null ? void 0 : options.validateStatus);
    },
    put: async (url, data, options) => {
      const headers = new Headers({
        ...defaultHeader,
        ...options == null ? void 0 : options.headers
      });
      const createRequestUrl = makeCreateRequestUrl(options);
      if (isFormDataRequest(data)) {
        headers.delete("Content-Type");
      }
      const response = await fetch(createRequestUrl(url), {
        signal: (options == null ? void 0 : options.signal) ?? defaultOptions.signal,
        method: "PUT",
        headers,
        body: isFormDataRequest(data) ? data : JSON.stringify(data)
      });
      return responseInterceptor(response, options == null ? void 0 : options.validateStatus);
    },
    del: async (url, options) => {
      const headers = new Headers({
        ...defaultHeader,
        ...options == null ? void 0 : options.headers
      });
      const createRequestUrl = makeCreateRequestUrl(options);
      const response = await fetch(createRequestUrl(url), {
        signal: (options == null ? void 0 : options.signal) ?? defaultOptions.signal,
        method: "DELETE",
        headers
      });
      return responseInterceptor(response, options == null ? void 0 : options.validateStatus);
    }
  };
  return fetchClient;
};

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/utils/baseQuery.mjs
var simpleQuery = async (query, { signal }) => {
  var _a, _b, _c, _d;
  try {
    const { get, post, del, put } = getFetchClient();
    if (typeof query === "string") {
      const result = await get(query, {
        signal
      });
      return {
        data: result.data
      };
    } else {
      const { url, method = "GET", data, config } = query;
      if (method === "POST") {
        const result2 = await post(url, data, {
          ...config,
          signal
        });
        return {
          data: result2.data
        };
      }
      if (method === "DELETE") {
        const result2 = await del(url, {
          ...config,
          signal
        });
        return {
          data: result2.data
        };
      }
      if (method === "PUT") {
        const result2 = await put(url, data, {
          ...config,
          signal
        });
        return {
          data: result2.data
        };
      }
      const result = await get(url, {
        ...config,
        signal
      });
      return {
        data: result.data
      };
    }
  } catch (err) {
    if (isFetchError(err)) {
      if (typeof ((_a = err.response) == null ? void 0 : _a.data) === "object" && ((_b = err.response) == null ? void 0 : _b.data) !== null && "error" in ((_c = err.response) == null ? void 0 : _c.data)) {
        return {
          data: void 0,
          error: (_d = err.response) == null ? void 0 : _d.data.error
        };
      } else {
        return {
          data: void 0,
          error: {
            name: "UnknownError",
            message: err.message,
            details: err.response,
            status: err.status
          }
        };
      }
    }
    const error = err;
    return {
      data: void 0,
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      }
    };
  }
};
var fetchBaseQuery = () => simpleQuery;
var isBaseQueryError = (error) => {
  return error.name !== void 0;
};

// node_modules/@strapi/plugin-documentation/node_modules/@strapi/admin/dist/admin/admin/src/services/api.mjs
var adminApi = createApi({
  reducerPath: "adminApi",
  baseQuery: fetchBaseQuery(),
  tagTypes: [],
  endpoints: () => ({})
});

export {
  getCookieValue,
  setCookie,
  deleteCookie,
  isFetchError,
  getFetchClient,
  isBaseQueryError,
  adminApi
};
//# sourceMappingURL=chunk-E32XYDKH.js.map
