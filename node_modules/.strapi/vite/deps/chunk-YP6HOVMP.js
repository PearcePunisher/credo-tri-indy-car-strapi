import {
  require_baseForOwn
} from "./chunk-U2S4VNVE.js";
import {
  require_baseIteratee
} from "./chunk-EPIVQ5PX.js";
import {
  require_arrayEach,
  require_baseCreate,
  require_getPrototype,
  require_isArray,
  require_isBuffer,
  require_isFunction,
  require_isObject,
  require_isTypedArray
} from "./chunk-HM5YIFDI.js";
import {
  __commonJS
} from "./chunk-LK32TJAX.js";

// node_modules/lodash/transform.js
var require_transform = __commonJS({
  "node_modules/lodash/transform.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var baseCreate = require_baseCreate();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    var getPrototype = require_getPrototype();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isTypedArray = require_isTypedArray();
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
      iteratee = baseIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
        return iteratee(accumulator, value, index, object2);
      });
      return accumulator;
    }
    module.exports = transform;
  }
});

export {
  require_transform
};
//# sourceMappingURL=chunk-YP6HOVMP.js.map
